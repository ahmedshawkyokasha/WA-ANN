% ANN Training

% This Code was developed using MATLAB R2023a - academic use

% Training the Neural Network using Neural Net Time Series app

% 1- Create a Nonlinear Autoregressive Network with External Input (NARX)

% Load Historical Climate and Groundwater Level Data (GWL)
monthly_predictors = csvread('monthly_climate.csv');
monthly_response = csvread('monthly_GWLs.csv');

X = tonndata(monthly_predictors,false,false);
T = tonndata(monthly_response,false,false);

% Set the Random Seed for Reproducibility
rng(1);

% Select a Training Function
trainFcn = 'trainbr';  % Bayesian Regularization

% Create the network
inputDelays = 1:8;
feedbackDelays = 1:8;
hiddenLayerSize = 10;
nett = narxnet(inputDelays,feedbackDelays,hiddenLayerSize,'open',trainFcn);

% Prepare the Data for Training and Simulation
[x,xi,ai,t] = preparets(nett,X,{},T);

% Setup Division of Data for Training, Validation, Testing
nett.divideParam.trainRatio = 70/100;
nett.divideParam.valRatio = 10/100;
nett.divideParam.testRatio = 20/100;

% Train the Network
[nett,tr] = train(nett,x,t,xi,ai);

% Test the Network
y = nett(x,xi,ai);
e = gsubtract(t,y);
performance = perform(nett,t,y)

% View the Network
view(nett)

% Plots
figure, plotperform(tr)
figure, plottrainstate(tr)
figure, ploterrhist(e)
figure, plotregression(t,y)
figure, plotresponse(t,y)
figure, ploterrcorr(e)
figure, plotinerrcorr(x,e)

% Step-Ahead Prediction Network
nets = removedelay(nett);
nets.name = [nett.name ' - Predict One Step Ahead'];
view(nets)
[xs,xis,ais,ts] = preparets(nets,X,{},T);
ys = nets(xs,xis,ais);
stepAheadPerformance = perform(nets,ts,ys)

%% 2- Create a Nonlinear Input-Output Network (NIO)

X = tonndata(monthly_predictors,false,false);
T = tonndata(monthly_response,false,false);

% Set the Random Seed for Reproducibility
rng(2);

% Choose a Training Function
trainFcn = 'trainbr';  % Bayesian Regularization

% Create a Time Delay Network
inputDelays = 1:10;
hiddenLayerSize = 20;
net = timedelaynet(inputDelays,hiddenLayerSize,trainFcn);

% Prepare the Data for Training and Simulation
[x,xi,ai,t] = preparets(net,X,T);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 10/100;
net.divideParam.testRatio = 20/100;

% Train the Network
[net,tr] = train(net,x,t,xi,ai);

% Test the Network
y = net(x,xi,ai);
e = gsubtract(t,y);
performance = perform(net,t,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotresponse(t,y)
%figure, ploterrcorr(e)
%figure, plotinerrcorr(x,e)

% Step-Ahead Prediction Network

nets = removedelay(net);
nets.name = [net.name ' - Predict One Step Ahead'];
view(nets)
[xs,xis,ais,ts] = preparets(nets,X,T);
ys = nets(xs,xis,ais);
stepAheadPerformance = perform(nets,ts,ys)

%% 3- Create a Nonlinear Autoregressive Network (NAR)

T = tonndata(monthly_response,false,false);

% Set the Random Seed for Reproducibility
% rng(3);

% Choose a Training Function
trainFcn = 'trainlm';  % Bayesian Regularization backpropagation.

% Create the Network
feedbackDelays = 1:48;
hiddenLayerSize = 10;
net = narnet(feedbackDelays,hiddenLayerSize,'open',trainFcn);

% Prepare the Data for Training and Simulation
[x,xi,ai,t] = preparets(net,{},{},T);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 10/100;
net.divideParam.testRatio = 20/100;

% Train the Network
[net,tr] = train(net,x,t,xi,ai);

% Test the Network
y = net(x,xi,ai);
e = gsubtract(t,y);
performance = perform(net,t,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotresponse(t,y)
%figure, ploterrcorr(e)
%figure, plotinerrcorr(x,e)

% Step-Ahead Prediction Network
nets = removedelay(net);
nets.name = [net.name ' - Predict One Step Ahead'];
view(nets)
[xs,xis,ais,ts] = preparets(nets,{},{},T);
ys = nets(xs,xis,ais);
stepAheadPerformance = perform(nets,ts,ys)
